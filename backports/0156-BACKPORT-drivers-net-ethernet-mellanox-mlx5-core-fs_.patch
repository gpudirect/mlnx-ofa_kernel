From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/fs_counters.c

Change-Id: I713a465472173a19af6e61105ba8e57f5505590a
---
 .../net/ethernet/mellanox/mlx5/core/fs_counters.c  | 40 ++++++++++++++++++----
 1 file changed, 34 insertions(+), 6 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_counters.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_counters.c
@@ -77,9 +77,12 @@ static struct list_head *mlx5_fc_counter
 						      u32 id)
 {
 	struct mlx5_fc_stats *fc_stats = &dev->priv.fc_stats;
+#ifdef HAVE_IDR_RT
 	unsigned long next_id = (unsigned long)id + 1;
+#endif
 	struct mlx5_fc *counter;
 
+#ifdef HAVE_IDR_RT
 	rcu_read_lock();
 	/* skip counters that are in idr, but not yet in counters list */
 	while ((counter = idr_get_next_ul(&fc_stats->counters_idr,
@@ -87,8 +90,16 @@ static struct list_head *mlx5_fc_counter
 	       list_empty(&counter->list))
 		next_id++;
 	rcu_read_unlock();
-
+#else
+	list_for_each_entry(counter, &fc_stats->counters, list)
+		if (counter->id > id)
+			return &counter->list;
+#endif
+#ifdef HAVE_IDR_RT
 	return counter ? &counter->list : &fc_stats->counters;
+#else
+	return &fc_stats->counters;
+#endif
 }
 
 static void mlx5_fc_stats_insert(struct mlx5_core_dev *dev,
@@ -102,13 +113,21 @@ static void mlx5_fc_stats_insert(struct
 static void mlx5_fc_stats_remove(struct mlx5_core_dev *dev,
 				 struct mlx5_fc *counter)
 {
+#ifdef HAVE_IDR_RT
 	struct mlx5_fc_stats *fc_stats = &dev->priv.fc_stats;
+#endif
 
 	list_del(&counter->list);
 
+#ifdef HAVE_IDR_RT
 	spin_lock(&fc_stats->counters_idr_lock);
+#ifdef HAVE_IDR_REMOVE_RETURN_VALUE 
 	WARN_ON(!idr_remove(&fc_stats->counters_idr, counter->id));
+#else
+	idr_remove(&fc_stats->counters_idr, counter->id);
+#endif
 	spin_unlock(&fc_stats->counters_idr_lock);
+#endif/*HAVE_IDR_RT*/
 }
 
 /* The function returns the last counter that was queried so the caller
@@ -240,18 +259,21 @@ struct mlx5_fc *mlx5_fc_create(struct ml
 	counter = kzalloc(sizeof(*counter), GFP_KERNEL);
 	if (!counter)
 		return ERR_PTR(-ENOMEM);
+#ifdef HAVE_IDR_RT
 	INIT_LIST_HEAD(&counter->list);
-
+#endif
 	err = mlx5_cmd_fc_alloc(dev, &counter->id);
 	if (err)
 		goto err_out;
 
 	if (aging) {
+#ifdef HAVE_IDR_RT
 		u32 id = counter->id;
+#endif
 
 		counter->cache.lastuse = jiffies;
 		counter->aging = true;
-
+#ifdef HAVE_IDR_RT
 		idr_preload(GFP_KERNEL);
 		spin_lock(&fc_stats->counters_idr_lock);
 
@@ -262,7 +284,7 @@ struct mlx5_fc *mlx5_fc_create(struct ml
 		idr_preload_end();
 		if (err)
 			goto err_out_alloc;
-
+#endif
 		llist_add(&counter->addlist, &fc_stats->addlist);
 
 		mod_delayed_work(fc_stats->wq, &fc_stats->work, 0);
@@ -270,8 +292,10 @@ struct mlx5_fc *mlx5_fc_create(struct ml
 
 	return counter;
 
+#ifdef HAVE_IDR_RT
 err_out_alloc:
 	mlx5_cmd_fc_free(dev, counter->id);
+#endif
 err_out:
 	kfree(counter);
 
@@ -305,9 +329,10 @@ EXPORT_SYMBOL(mlx5_fc_destroy);
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev)
 {
 	struct mlx5_fc_stats *fc_stats = &dev->priv.fc_stats;
-
+#ifdef HAVE_IDR_RT
 	spin_lock_init(&fc_stats->counters_idr_lock);
 	idr_init(&fc_stats->counters_idr);
+#endif
 	INIT_LIST_HEAD(&fc_stats->counters);
 	init_llist_head(&fc_stats->addlist);
 	init_llist_head(&fc_stats->dellist);
@@ -333,8 +358,9 @@ void mlx5_cleanup_fc_stats(struct mlx5_c
 	destroy_workqueue(dev->priv.fc_stats.wq);
 	dev->priv.fc_stats.wq = NULL;
 
+#ifdef HAVE_IDR_RT
 	idr_destroy(&fc_stats->counters_idr);
-
+#endif
 	tmplist = llist_del_all(&fc_stats->addlist);
 	llist_for_each_entry_safe(counter, tmp, tmplist, addlist)
 		mlx5_free_fc(dev, counter);
@@ -365,6 +391,7 @@ void mlx5_fc_query_cached(struct mlx5_fc
 	counter->lastpackets = c.packets;
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 void mlx5_fc_queue_stats_work(struct mlx5_core_dev *dev,
 			      struct delayed_work *dwork,
 			      unsigned long delay)
@@ -382,3 +409,4 @@ void mlx5_fc_update_sampling_interval(st
 	fc_stats->sampling_interval = min_t(unsigned long, interval,
 					    fc_stats->sampling_interval);
 }
+#endif
