From: Chris Mi <chrism@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_rep.h

Change-Id: I4a33c0cfacc2eb8525b72bca8224e82b6b0daa73
---
 drivers/net/ethernet/mellanox/mlx5/core/en_rep.h | 43 ++++++++++++++++++++++++
 1 file changed, 43 insertions(+)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
@@ -33,9 +33,16 @@
 #ifndef __MLX5E_REP_H__
 #define __MLX5E_REP_H__
 
+#if defined(HAVE_IP_TUNNEL_INFO) || defined(CONFIG_COMPAT_IP_TUNNELS)
 #include <net/ip_tunnels.h>
+#endif
 #include <linux/rhashtable.h>
 #include <linux/mutex.h>
+#ifdef HAVE_REFCOUNT
+#include <linux/refcount.h>
+#else
+#include <linux/atomic.h>
+#endif
 #include "eswitch.h"
 #include "en.h"
 
@@ -48,10 +55,12 @@ struct mlx5e_neigh_update_table {
 	 */
 	struct list_head	neigh_list;
 	/* protect lookup/remove operations */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	spinlock_t              encap_lock;
 	struct notifier_block   netevent_nb;
 	struct delayed_work     neigh_stats_work;
 	unsigned long           min_interval; /* jiffies */
+#endif
 };
 
 struct mlx5e_rep_priv {
@@ -77,7 +86,9 @@ struct mlx5e_neigh {
 		__be32	v4;
 		struct in6_addr v6;
 	} dst_ip;
+#ifdef HAVE_TCF_TUNNEL_INFO
 	int family;
+#endif
 };
 
 struct mlx5e_neigh_hash_entry {
@@ -93,6 +104,7 @@ struct mlx5e_neigh_hash_entry {
 	/* protects encap list */
 	spinlock_t encap_list_lock;
 	/* encap list sharing the same neigh */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct list_head encap_list;
 
 	/* valid only when the neigh reference is taken during
@@ -105,21 +117,39 @@ struct mlx5e_neigh_hash_entry {
 	 * refcount is needed to avoid neigh hash entry removal by TC, while
 	 * it's used by the neigh notification call.
 	 */
+#ifdef HAVE_REFCOUNT
 	refcount_t refcnt;
+#else
+	atomic_t refcnt;
+#endif
+#endif
 
 	/* Save the last reported time offloaded trafic pass over one of the
 	 * neigh hash entry flows. Use it to periodically update the neigh
 	 * 'used' value and avoid neigh deleting by the kernel.
 	 */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	unsigned long reported_lastuse;
+#endif
 
 	struct rcu_head rcu;
 };
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 enum {
 	/* set when the encap entry is successfully offloaded into HW */
 	MLX5_ENCAP_ENTRY_VALID     = BIT(0),
 };
+#endif
+
+#ifdef HAVE_NET_TC_ACT_TC_TUNNEL_KEY_H
+#if !defined(HAVE_IP_TUNNEL_INFO) && !defined(CONFIG_COMPAT_IP_TUNNELS)
+struct mlx5_encap_info {
+	__be32 daddr;
+	__be32 tun_id;
+	__be16 tp_dst;
+};
+#endif
 
 struct mlx5e_encap_entry {
 	/* protects encap entry state */
@@ -129,28 +159,39 @@ struct mlx5e_encap_entry {
 	struct mlx5e_neigh_hash_entry *nhe;
 
 	/* neigh hash entry list of encaps sharing the same neigh */
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct list_head encap_list;
 	/* neigh hash entry temporary list of encaps that need update */
 	struct list_head neigh_update_list;
 	struct mlx5e_neigh m_neigh;
+#endif
 	/* a node of the eswitch encap hash table which keeping all the encap
 	 * entries
 	 */
 	struct hlist_node encap_hlist;
 	struct list_head flows;
 	u32 encap_id;
+#if defined(HAVE_IP_TUNNEL_INFO) || defined(CONFIG_COMPAT_IP_TUNNELS)
 	struct ip_tunnel_info tun_info;
+#else
+	struct mlx5_encap_info tun_info;
+#endif
 	unsigned char h_dest[ETH_ALEN];	/* destination eth addr	*/
 
 	struct net_device *out_dev;
 	int tunnel_type;
+#ifdef HAVE_TCF_TUNNEL_INFO
 	u8 flags;
 	char *encap_header;
 	int encap_size;
+#else
+	struct neighbour *n;
+#endif
 	unsigned long updated;
 	refcount_t refcnt;
 	struct rcu_head rcu;
 };
+#endif
 
 struct mlx5e_rep_sq {
 	struct mlx5_flow_handle	*send_to_vport_rule;
@@ -166,10 +207,12 @@ void mlx5e_remove_sqs_fwd_rules(struct m
 
 void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 int mlx5e_rep_encap_entry_attach(struct mlx5e_priv *priv,
 				 struct mlx5e_encap_entry *e);
 void mlx5e_rep_encap_entry_detach(struct mlx5e_priv *priv,
 				  struct mlx5e_encap_entry *e);
+#endif
 
 bool mlx5e_rep_neigh_entry_hold(struct mlx5e_neigh_hash_entry *nhe);
 void mlx5e_rep_queue_neigh_stats_work(struct mlx5e_priv *priv);
