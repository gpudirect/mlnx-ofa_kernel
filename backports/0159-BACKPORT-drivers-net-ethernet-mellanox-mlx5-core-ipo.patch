From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c

Change-Id: If2d9779a7f9846e6bdcbcf95bdfbdaf7e5b8f8b5
---
 .../net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c  | 86 +++++++++++++++++++++-
 1 file changed, 85 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@ -48,11 +48,22 @@ static const struct net_device_ops mlx5i
 	.ndo_open                = mlx5i_open,
 	.ndo_stop                = mlx5i_close,
 	.ndo_tx_timeout          = mlx5i_tx_timeout,
+#if defined(HAVE_NDO_GET_STATS64) || defined(HAVE_NDO_GET_STATS64_RET_VOID)
 	.ndo_get_stats64         = mlx5i_get_stats,
+#else
+	.ndo_get_stats           = mlx5i_get_stats,
+#endif
 	.ndo_init                = mlx5i_dev_init,
 	.ndo_uninit              = mlx5i_dev_cleanup,
+#ifndef HAVE_NDO_CHANGE_MTU_EXTENDED
 	.ndo_change_mtu          = mlx5i_change_mtu,
+#else
+	.extended.ndo_change_mtu          = mlx5i_change_mtu,
+#endif
 	.ndo_do_ioctl            = mlx5i_ioctl,
+#ifdef HAVE_NET_DEVICE_OPS_EXTENDED
+	.ndo_size = sizeof(struct net_device_ops),
+#endif
 };
 
 /* IPoIB mlx5 netdev profile */
@@ -70,10 +81,34 @@ static void mlx5i_build_nic_params(struc
 		MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE :
 		MLX5I_PARAMS_DEFAULT_LOG_RQ_SIZE;
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	params->lro_en = true;
+	params->pflags &= ~MLX5E_PFLAG_HWLRO;
+#else
 	params->lro_en = false;
+#endif
 	params->hard_mtu = MLX5_IB_GRH_BYTES + MLX5_IPOIB_HARD_LEN;
 }
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+void set_lro_features_bit(struct mlx5e_priv *priv)
+{
+	u64 hw_support_lro = 0;
+#ifdef HAVE_NETDEV_HW_FEATURES
+	hw_support_lro = priv->netdev->hw_features & NETIF_F_RXCSUM;
+#else
+	hw_support_lro = priv->netdev->features & NETIF_F_RXCSUM;
+#endif
+	if (hw_support_lro) {
+		priv->netdev->features |= NETIF_F_LRO;
+#ifdef HAVE_NETDEV_HW_FEATURES
+		priv->netdev->hw_features |= NETIF_F_LRO;
+		priv->netdev->wanted_features |= NETIF_F_LRO;
+#endif
+	}
+}
+#endif
+
 static void mlx5i_tx_timeout_work(struct work_struct *work)
 {
 	struct mlx5e_priv *priv = container_of(work, struct mlx5e_priv,
@@ -118,6 +153,7 @@ int mlx5i_init(struct mlx5_core_dev *mde
 	mlx5e_timestamp_init(priv);
 
 	/* netdev init */
+#ifdef HAVE_NETDEV_HW_FEATURES
 	netdev->hw_features    |= NETIF_F_SG;
 	netdev->hw_features    |= NETIF_F_IP_CSUM;
 	netdev->hw_features    |= NETIF_F_IPV6_CSUM;
@@ -125,10 +161,32 @@ int mlx5i_init(struct mlx5_core_dev *mde
 	netdev->hw_features    |= NETIF_F_TSO;
 	netdev->hw_features    |= NETIF_F_TSO6;
 	netdev->hw_features    |= NETIF_F_RXCSUM;
+#ifdef HAVE_NETIF_F_RXHASH
 	netdev->hw_features    |= NETIF_F_RXHASH;
+#endif
+#else /* HAVE_NETDEV_HW_FEATURES */
+	netdev->features    |= NETIF_F_SG;
+	netdev->features    |= NETIF_F_IP_CSUM;
+	netdev->features    |= NETIF_F_IPV6_CSUM;
+	netdev->features    |= NETIF_F_GRO;
+	netdev->features    |= NETIF_F_TSO;
+	netdev->features    |= NETIF_F_TSO6;
+	netdev->features    |= NETIF_F_RXCSUM;
+#ifdef HAVE_NETIF_F_RXHASH
+	netdev->features    |= NETIF_F_RXHASH;
+#endif
+#endif /* HAVE_NETDEV_HW_FEATURES */
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	set_lro_features_bit(priv);
+#endif
 
 	netdev->netdev_ops = &mlx5i_netdev_ops;
+#ifndef HAVE_ETHTOOL_OPS_EXT
 	netdev->ethtool_ops = &mlx5i_ethtool_ops;
+#else
+	SET_ETHTOOL_OPS(netdev, &mlx5i_ethtool_ops);
+	set_ethtool_ops_ext(netdev, &mlx5i_ethtool_ops_ext);
+#endif
 
 	return 0;
 }
@@ -167,10 +225,20 @@ static void mlx5i_grp_sw_update_stats(st
 	memcpy(&priv->stats.sw, &s, sizeof(s));
 }
 
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
 void mlx5i_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+#elif defined(HAVE_NDO_GET_STATS64)
+struct rtnl_link_stats64 * mlx5i_get_stats(struct net_device *dev,
+					   struct rtnl_link_stats64 *stats)
+#else
+struct net_device_stats * mlx5i_get_stats(struct net_device *dev)
+#endif
 {
 	struct mlx5e_priv     *priv   = mlx5i_epriv(dev);
 	struct mlx5e_sw_stats *sstats = &priv->stats.sw;
+#if !defined(HAVE_NDO_GET_STATS64) && !defined(HAVE_NDO_GET_STATS64_RET_VOID)
+	struct net_device_stats *stats = &priv->netdev_stats;
+#endif
 
 	mlx5i_grp_sw_update_stats(priv);
 
@@ -179,6 +247,10 @@ void mlx5i_get_stats(struct net_device *
 	stats->tx_packets = sstats->tx_packets;
 	stats->tx_bytes   = sstats->tx_bytes;
 	stats->tx_dropped = sstats->tx_queue_dropped;
+
+#ifndef HAVE_NDO_GET_STATS64_RET_VOID
+	return stats;
+#endif
 }
 
 int mlx5i_init_underlay_qp(struct mlx5e_priv *priv)
@@ -328,7 +400,11 @@ static int mlx5i_create_flow_steering(st
 	if (err) {
 		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
 			   err);
+#ifdef HAVE_NETDEV_HW_FEATURES
+#ifdef CONFIG_RFS_ACCEL
 		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
+#endif
+#endif
 	}
 
 	mlx5e_set_ttc_basic_params(priv, &ttc_params);
@@ -522,9 +598,13 @@ int mlx5i_ioctl(struct net_device *dev,
 
 	switch (cmd) {
 	case SIOCSHWTSTAMP:
+#ifdef HAVE_SIOCGHWTSTAMP
 		return mlx5e_hwstamp_set(priv, ifr);
 	case SIOCGHWTSTAMP:
 		return mlx5e_hwstamp_get(priv, ifr);
+#else
+		return mlx5e_hwstamp_ioctl(priv, ifr);
+#endif
 	default:
 		return -EOPNOTSUPP;
 	}
@@ -751,9 +831,10 @@ static int mlx5_rdma_setup_rn(struct ib_
 	rn->detach_mcast = mlx5i_detach_mcast;
 	rn->set_id = mlx5i_set_pkey_index;
 
+#ifdef HAVE_NET_DEVICE_NEEDS_FREE_NETDEV
 	netdev->priv_destructor = mlx5_rdma_netdev_free;
 	netdev->needs_free_netdev = 1;
-
+#endif
 	return 0;
 
 destroy_ht:
@@ -781,6 +862,9 @@ int mlx5_rdma_rn_get_params(struct mlx5_
 		.rxqs = nch,
 		.param = mdev,
 		.initialize_rdma_netdev = mlx5_rdma_setup_rn,
+#ifndef HAVE_NET_DEVICE_NEEDS_FREE_NETDEV
+		.uninitialize_rdma_netdev = mlx5_rdma_netdev_free,
+#endif
 	};
 
 	return 0;
