From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/uverbs_cmd.c

Change-Id: Ied6ed6839dd73c3ee2e805acb26bb53940254169
---
 drivers/infiniband/core/uverbs_cmd.c | 41 ++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -82,7 +82,9 @@ ssize_t ib_uverbs_get_context(struct ib_
 	struct ib_udata                   udata;
 	struct ib_ucontext		 *ucontext;
 	struct file			 *filp;
+#ifdef HAVE_CGROUP_RDMA_H
 	struct ib_rdmacg_object		 cg_obj;
+#endif
 	struct ib_device *ib_dev;
 	int ret;
 
@@ -110,9 +112,11 @@ ssize_t ib_uverbs_get_context(struct ib_
 		   in_len - sizeof(cmd) - sizeof(struct ib_uverbs_cmd_hdr),
 		   out_len - sizeof(resp));
 
+#ifdef HAVE_CGROUP_RDMA_H
 	ret = ib_rdmacg_try_charge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
 	if (ret)
 		goto err;
+#endif
 
 	ucontext = ib_dev->alloc_ucontext(ib_dev, &udata);
 	if (IS_ERR(ucontext)) {
@@ -121,7 +125,9 @@ ssize_t ib_uverbs_get_context(struct ib_
 	}
 
 	ucontext->device = ib_dev;
+#ifdef HAVE_CGROUP_RDMA_H
 	ucontext->cg_obj = cg_obj;
+#endif
 	/* ufile is required when some objects are released */
 	ucontext->ufile = file;
 
@@ -162,7 +168,12 @@ ssize_t ib_uverbs_get_context(struct ib_
 	 * Make sure that ib_uverbs_get_ucontext() sees the pointer update
 	 * only after all writes to setup the ucontext have completed
 	 */
+#ifdef HAVE_SMP_LOAD_ACQUIRE
 	smp_store_release(&file->ucontext, ucontext);
+#else
+	smp_wmb();
+	file->ucontext = ucontext;
+#endif
 
 	mutex_unlock(&file->ucontext_lock);
 
@@ -179,7 +190,9 @@ err_free:
 	ib_dev->dealloc_ucontext(ucontext);
 
 err_alloc:
+#ifdef HAVE_CGROUP_RDMA_H
 	ib_rdmacg_uncharge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
+#endif
 
 err:
 	mutex_unlock(&file->ucontext_lock);
@@ -462,7 +475,11 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 	struct ib_udata			udata;
 	struct ib_uxrcd_object         *obj;
 	struct ib_xrcd                 *xrcd = NULL;
+#ifdef HAVE_FDGET
 	struct fd			f = {NULL, 0};
+#else
+	struct file                    *f = NULL;
+#endif
 	struct inode                   *inode = NULL;
 	int				ret = 0;
 	int				new_xrcd = 0;
@@ -482,6 +499,7 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 	mutex_lock(&file->device->xrcd_tree_mutex);
 
 	if (cmd.fd != -1) {
+#ifdef HAVE_FDGET
 		/* search for file descriptor */
 		f = fdget(cmd.fd);
 		if (!f.file) {
@@ -490,6 +508,19 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 		}
 
 		inode = file_inode(f.file);
+#else
+		f = fget(cmd.fd);
+		if (!f) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+
+		inode = f->f_dentry->d_inode;
+		if (!inode) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+#endif
 		xrcd = find_xrcd(file->device, inode);
 		if (!xrcd && !(cmd.oflags & O_CREAT)) {
 			/* no file descriptor. Need CREATE flag */
@@ -545,8 +576,13 @@ ssize_t ib_uverbs_open_xrcd(struct ib_uv
 		goto err_copy;
 	}
 
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&file->device->xrcd_tree_mutex);
 
@@ -566,8 +602,13 @@ err:
 	uobj_alloc_abort(&obj->uobject);
 
 err_tree_mutex_unlock:
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&file->device->xrcd_tree_mutex);
 
