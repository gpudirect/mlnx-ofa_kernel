From: Israel Rukshin <israelr@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/nvme/host/pci.c

Change-Id: I126cff9b8793bd2de2ee0cce424f41fcebe7fb78
---
 drivers/nvme/host/pci.c | 385 +++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 382 insertions(+), 3 deletions(-)

--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -24,13 +24,22 @@
 #include <linux/mm.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
+#ifdef HAVE_ONCE_H
 #include <linux/once.h>
+#endif
 #include <linux/pci.h>
 #include <linux/nvme-peer.h>
 #include <linux/t10-pi.h>
 #include <linux/types.h>
+#ifdef HAVE_IO_64_NONATOMIC_LO_HI_H
 #include <linux/io-64-nonatomic-lo-hi.h>
+#else
+#include <asm-generic/io-64-nonatomic-lo-hi.h>
+#endif
+#ifdef HAVE_LINUX_SED_OPAL_H
 #include <linux/sed-opal.h>
+#endif
+#include <linux/sizes.h>
 #include <linux/pci-p2pdma.h>
 
 #include "nvme.h"
@@ -108,9 +117,14 @@ struct nvme_dev {
 	struct dma_pool *prp_small_pool;
 	unsigned online_queues;
 	unsigned max_qid;
+#if defined(HAVE_PCI_IRQ_API) && defined(HAVE_IRQ_CALC_AFFINITY_VECTORS_3_ARGS)
 	unsigned int num_vecs;
+#endif
 	int q_depth;
 	u32 db_stride;
+#ifndef HAVE_PCI_IRQ_API
+	struct msix_entry *entry;
+#endif
 	void __iomem *bar;
 	unsigned long bar_mapped_size;
 	struct work_struct remove_work;
@@ -185,6 +199,9 @@ static inline struct nvme_dev *to_nvme_d
 struct nvme_queue {
 	struct device *q_dmadev;
 	struct nvme_dev *dev;
+#ifndef HAVE_PCI_FREE_IRQ
+	char irqname[24];	/* nvme4294967295-65535\0 */
+#endif
 	spinlock_t sq_lock;
 	struct nvme_command *sq_cmds;
 	bool sq_cmds_is_io;
@@ -242,11 +259,19 @@ static int nvme_peer_init_resource(struc
 
 	if (mask & NVME_PEER_SQT_DBR)
 		/* Calculation from NVMe 1.2.1 SPEC */
+#ifndef CONFIG_PPC
 		nvmeq->resource.sqt_dbr_addr = pci_bus_address(pdev, 0) + (0x1000 + ((2 * (qid)) * (4 << NVME_CAP_STRIDE(dev->ctrl.cap))));
+#else
+		nvmeq->resource.sqt_dbr_addr = 0x800000000000000 | (pci_resource_start(pdev, 0) + (0x1000 + ((2 * (qid)) * (4 << NVME_CAP_STRIDE(dev->ctrl.cap)))));
+#endif
 
 	if (mask & NVME_PEER_CQH_DBR)
 		/* Calculation from NVMe 1.2.1 SPEC */
+#ifndef CONFIG_PPC
 		nvmeq->resource.cqh_dbr_addr = pci_bus_address(pdev, 0) + (0x1000 + ((2 * (qid) + 1) * (4 << NVME_CAP_STRIDE(dev->ctrl.cap))));
+#else
+		nvmeq->resource.cqh_dbr_addr = 0x800000000000000 | (pci_resource_start(pdev, 0) + (0x1000 + ((2 * (qid) + 1) * (4 << NVME_CAP_STRIDE(dev->ctrl.cap)))));
+#endif
 
 	if (mask & NVME_PEER_SQ_PAS)
 		nvmeq->resource.sq_dma_addr = nvmeq->sq_dma_addr;
@@ -507,6 +532,17 @@ static unsigned int nvme_pci_cmd_size(st
 	return sizeof(struct nvme_iod) + alloc_size;
 }
 
+#ifndef HAVE_PCI_FREE_IRQ
+static int nvmeq_irq(struct nvme_queue *nvmeq)
+{
+#ifdef HAVE_PCI_IRQ_API
+	return pci_irq_vector(to_pci_dev(nvmeq->dev->dev), nvmeq->cq_vector);
+#else
+	return nvmeq->dev->entry[nvmeq->cq_vector].vector;
+#endif
+}
+#endif
+
 static int nvme_admin_init_hctx(struct blk_mq_hw_ctx *hctx, void *data,
 				unsigned int hctx_idx)
 {
@@ -543,6 +579,7 @@ static int nvme_init_hctx(struct blk_mq_
 	return 0;
 }
 
+#ifdef HAVE_BLK_MQ_OPS_INIT_REQUEST_HAS_4_PARAMS
 static int nvme_init_request(struct blk_mq_tag_set *set, struct request *req,
 		unsigned int hctx_idx, unsigned int numa_node)
 {
@@ -557,14 +594,63 @@ static int nvme_init_request(struct blk_
 	nvme_req(req)->ctrl = &dev->ctrl;
 	return 0;
 }
+#else
+static int nvme_init_request(void *data, struct request *req,
+		unsigned int hctx_idx, unsigned int rq_idx,
+		unsigned int numa_node)
+{
+	struct nvme_dev *dev = data;
+	struct nvme_iod *iod = blk_mq_rq_to_pdu(req);
+	struct nvme_queue *nvmeq = &dev->queues[hctx_idx + 1];
 
+	BUG_ON(!nvmeq);
+	iod->nvmeq = nvmeq;
+	return 0;
+}
+
+static int nvme_admin_init_request(void *data, struct request *req,
+		unsigned int hctx_idx, unsigned int rq_idx,
+		unsigned int numa_node)
+{
+	struct nvme_dev *dev = data;
+	struct nvme_iod *iod = blk_mq_rq_to_pdu(req);
+	struct nvme_queue *nvmeq = &dev->queues[0];
+
+	BUG_ON(!nvmeq);
+	iod->nvmeq = nvmeq;
+	return 0;
+}
+#endif
+
+#if defined(HAVE_BLK_MQ_OPS_MAP_QUEUES) && \
+	(defined(HAVE_PCI_IRQ_GET_AFFINITY) || \
+	defined(HAVE_BLK_MQ_PCI_MAP_QUEUES_3_ARGS))
 static int nvme_pci_map_queues(struct blk_mq_tag_set *set)
 {
 	struct nvme_dev *dev = set->driver_data;
 
+#if defined(HAVE_PCI_IRQ_API) && defined(HAVE_IRQ_CALC_AFFINITY_VECTORS_3_ARGS)
+#ifdef HAVE_BLK_MQ_PCI_MAP_QUEUES_3_ARGS
+#ifdef HAVE_BLK_MQ_QUEUE_MAP
 	return blk_mq_pci_map_queues(&set->map[0], to_pci_dev(dev->dev),
 			dev->num_vecs > 1 ? 1 /* admin queue */ : 0);
+#else
+	return blk_mq_pci_map_queues(set, to_pci_dev(dev->dev),
+			dev->num_vecs > 1 ? 1 /* admin queue */ : 0);
+#endif
+#else /* HAVE_BLK_MQ_PCI_MAP_QUEUES_3_ARGS */
+	return __blk_mq_pci_map_queues(set, to_pci_dev(dev->dev),
+			dev->num_vecs > 1 ? 1 /* admin queue */ : 0);
+#endif
+#else /* HAVE_PCI_IRQ_API && HAVE_IRQ_CALC_AFFINITY_VECTORS_3_ARGS */
+#ifdef HAVE_BLK_MQ_PCI_MAP_QUEUES_3_ARGS
+	return blk_mq_pci_map_queues(set, to_pci_dev(dev->dev), 0);
+#else
+	return __blk_mq_pci_map_queues(set, to_pci_dev(dev->dev), 0);
+#endif
+#endif
 }
+#endif
 
 /**
  * nvme_submit_cmd() - Copy a command into a queue and ring the doorbell
@@ -600,7 +686,11 @@ static inline bool nvme_pci_use_sgls(str
 	if (nseg == 0)
 		return false;
 
+#ifdef HAVE_BLK_RQ_NR_PAYLOAD_BYTES
 	avg_seg_size = DIV_ROUND_UP(blk_rq_payload_bytes(req), nseg);
+#else
+	avg_seg_size = DIV_ROUND_UP(nvme_map_len(req), nseg);
+#endif
 
 	if (!(dev->ctrl.sgls & ((1 << 0) | (1 << 1))))
 		return false;
@@ -615,7 +705,11 @@ static blk_status_t nvme_init_iod(struct
 {
 	struct nvme_iod *iod = blk_mq_rq_to_pdu(rq);
 	int nseg = blk_rq_nr_phys_segments(rq);
+#ifdef HAVE_BLK_RQ_NR_PAYLOAD_BYTES
 	unsigned int size = blk_rq_payload_bytes(rq);
+#else
+	unsigned int size = nvme_map_len(rq);
+#endif
 
 	iod->use_sgl = nvme_pci_use_sgls(dev, rq);
 
@@ -669,6 +763,7 @@ static void nvme_free_iod(struct nvme_de
 		mempool_free(iod->sg, dev->iod_mempool);
 }
 
+#ifdef HAVE_ONCE_H
 static void nvme_print_sgl(struct scatterlist *sgl, int nents)
 {
 	int i;
@@ -682,13 +777,18 @@ static void nvme_print_sgl(struct scatte
 			sg_dma_len(sg));
 	}
 }
+#endif
 
 static blk_status_t nvme_pci_setup_prps(struct nvme_dev *dev,
 		struct request *req, struct nvme_rw_command *cmnd)
 {
 	struct nvme_iod *iod = blk_mq_rq_to_pdu(req);
 	struct dma_pool *pool;
+#ifdef HAVE_BLK_RQ_NR_PAYLOAD_BYTES
 	int length = blk_rq_payload_bytes(req);
+#else
+	int length = nvme_map_len(req);
+#endif
 	struct scatterlist *sg = iod->sg;
 	int dma_len = sg_dma_len(sg);
 	u64 dma_addr = sg_dma_address(sg);
@@ -770,9 +870,31 @@ done:
 	return BLK_STS_OK;
 
  bad_sgl:
+#ifdef HAVE_ONCE_H
 	WARN(DO_ONCE(nvme_print_sgl, iod->sg, iod->nents),
 			"Invalid SGL for payload:%d nents:%d\n",
+#ifdef HAVE_BLK_RQ_NR_PAYLOAD_BYTES
 			blk_rq_payload_bytes(req), iod->nents);
+#else
+			nvme_map_len(req), iod->nents);
+#endif
+#else
+	if (WARN_ONCE(1, "Invalid SGL for payload:%d nents:%d\n",
+#ifdef HAVE_BLK_RQ_NR_PAYLOAD_BYTES
+		      blk_rq_payload_bytes(req), iod->nents)) {
+#else
+		      nvme_map_len(req), iod->nents)) {
+#endif
+		for_each_sg(iod->sg, sg, iod->nents, i) {
+			dma_addr_t phys = sg_phys(sg);
+			pr_warn("sg[%d] phys_addr:%pad offset:%d length:%d "
+				"dma_address:%pad dma_length:%d\n", i, &phys,
+				sg->offset, sg->length,
+				&sg_dma_address(sg),
+				sg_dma_len(sg));
+		}
+	}
+#endif
 	return BLK_STS_IOERR;
 }
 
@@ -877,8 +999,13 @@ static blk_status_t nvme_map_data(struct
 		nr_mapped = pci_p2pdma_map_sg(dev->dev, iod->sg, iod->nents,
 					  dma_dir);
 	else
+#if defined(HAVE_DMA_ATTR_NO_WARN) && \
+	defined(HAVE_DMA_SET_ATTR_TAKES_UNSIGNED_LONG_ATTRS)
 		nr_mapped = dma_map_sg_attrs(dev->dev, iod->sg, iod->nents,
 					     dma_dir,  DMA_ATTR_NO_WARN);
+#else
+		nr_mapped = dma_map_sg(dev->dev, iod->sg, iod->nents, dma_dir);
+#endif
 	if (!nr_mapped)
 		goto out;
 
@@ -1108,12 +1235,23 @@ static int __nvme_poll(struct nvme_queue
 	return found;
 }
 
+#ifdef HAVE_BLK_MQ_OPS_POLL
+#ifdef HAVE_BLK_MQ_POLL_FN_1_ARG
 static int nvme_poll(struct blk_mq_hw_ctx *hctx)
 {
 	struct nvme_queue *nvmeq = hctx->driver_data;
 
 	return __nvme_poll(nvmeq, -1);
 }
+#else
+static int nvme_poll(struct blk_mq_hw_ctx *hctx, unsigned int tag)
+{
+	struct nvme_queue *nvmeq = hctx->driver_data;
+
+	return __nvme_poll(nvmeq, tag);
+}
+#endif
+#endif
 
 static void nvme_pci_submit_async_event(struct nvme_ctrl *ctrl)
 {
@@ -1280,7 +1418,11 @@ static enum blk_eh_timer_return nvme_tim
 		nvme_warn_reset(dev, csts);
 		nvme_dev_disable(dev, false);
 		nvme_reset_ctrl(&dev->ctrl);
+#ifdef HAVE_BLK_EH_DONE
 		return BLK_EH_DONE;
+#else
+		return BLK_EH_HANDLED;
+#endif
 	}
 
 	/*
@@ -1290,7 +1432,11 @@ static enum blk_eh_timer_return nvme_tim
 		dev_warn(dev->ctrl.device,
 			 "I/O %d QID %d timeout, completion polled\n",
 			 req->tag, nvmeq->qid);
+#ifdef HAVE_BLK_EH_DONE
 		return BLK_EH_DONE;
+#else
+		return BLK_EH_HANDLED;
+#endif
 	}
 
 	/*
@@ -1307,7 +1453,11 @@ static enum blk_eh_timer_return nvme_tim
 			 req->tag, nvmeq->qid);
 		nvme_dev_disable(dev, false);
 		nvme_req(req)->flags |= NVME_REQ_CANCELLED;
+#ifdef HAVE_BLK_EH_DONE
 		return BLK_EH_DONE;
+#else
+		return BLK_EH_HANDLED;
+#endif
 	default:
 		break;
 	}
@@ -1325,7 +1475,11 @@ static enum blk_eh_timer_return nvme_tim
 		nvme_reset_ctrl(&dev->ctrl);
 
 		nvme_req(req)->flags |= NVME_REQ_CANCELLED;
+#ifdef HAVE_BLK_EH_DONE
 		return BLK_EH_DONE;
+#else
+		return BLK_EH_HANDLED;
+#endif
 	}
 
 	if (atomic_dec_return(&dev->ctrl.abort_limit) < 0) {
@@ -1343,8 +1497,13 @@ static enum blk_eh_timer_return nvme_tim
 		"I/O %d QID %d timeout, aborting\n",
 		 req->tag, nvmeq->qid);
 
+#ifdef HAVE_BLK_MQ_ALLOC_REQUEST_HAS_3_PARAMS
 	abort_req = nvme_alloc_request(dev->ctrl.admin_q, &cmd,
 			BLK_MQ_REQ_NOWAIT, NVME_QID_ANY);
+#else
+	abort_req = nvme_alloc_request(dev->ctrl.admin_q, &cmd,
+			GFP_KERNEL, reserved, NVME_QID_ANY);
+#endif
 	if (IS_ERR(abort_req)) {
 		atomic_inc(&dev->ctrl.abort_limit);
 		return BLK_EH_RESET_TIMER;
@@ -1404,7 +1563,11 @@ static int nvme_suspend_queue(struct nvm
 		return 1;
 	}
 	if (!nvmeq->p2p)
+#ifdef HAVE_PCI_FREE_IRQ
 		vector = nvmeq->cq_vector;
+#else
+		vector = nvmeq_irq(nvmeq);
+#endif
 	else {
 		mutex_lock(&nvmeq->resource.lock);
 		if (nvmeq->resource.in_use && nvmeq->resource.stop_master_peer) {
@@ -1425,10 +1588,18 @@ static int nvme_suspend_queue(struct nvm
 	mb();
 
 	if (!nvmeq->qid && nvmeq->dev->ctrl.admin_q)
+#ifdef HAVE_BLK_MQ_UNQUIESCE_QUEUE
 		blk_mq_quiesce_queue(nvmeq->dev->ctrl.admin_q);
+#else
+		blk_mq_stop_hw_queues(nvmeq->dev->ctrl.admin_q);
+#endif
 
 	if (!nvmeq->p2p)
+#ifdef HAVE_PCI_FREE_IRQ
 		pci_free_irq(to_pci_dev(nvmeq->dev->dev), vector, nvmeq);
+#else
+		free_irq(vector, nvmeq);
+#endif
 
 	return 0;
 }
@@ -1514,6 +1685,10 @@ static int nvme_alloc_queue(struct nvme_
 
 	nvmeq->q_dmadev = dev->dev;
 	nvmeq->dev = dev;
+#ifndef HAVE_PCI_FREE_IRQ
+	snprintf(nvmeq->irqname, sizeof(nvmeq->irqname), "nvme%dq%d",
+			dev->ctrl.instance, qid);
+#endif
 	spin_lock_init(&nvmeq->sq_lock);
 	spin_lock_init(&nvmeq->cq_lock);
 	nvmeq->cq_head = 0;
@@ -1538,6 +1713,7 @@ static int nvme_alloc_queue(struct nvme_
 
 static int queue_request_irq(struct nvme_queue *nvmeq)
 {
+#ifdef HAVE_PCI_FREE_IRQ
 	struct pci_dev *pdev = to_pci_dev(nvmeq->dev->dev);
 	int nr = nvmeq->dev->ctrl.instance;
 
@@ -1548,6 +1724,14 @@ static int queue_request_irq(struct nvme
 		return pci_request_irq(pdev, nvmeq->cq_vector, nvme_irq,
 				NULL, nvmeq, "nvme%dq%d", nr, nvmeq->qid);
 	}
+#else
+	if (use_threaded_interrupts)
+		return request_threaded_irq(nvmeq_irq(nvmeq), nvme_irq_check,
+				nvme_irq, IRQF_SHARED, nvmeq->irqname, nvmeq);
+	else
+		return request_irq(nvmeq_irq(nvmeq), nvme_irq, IRQF_SHARED,
+				nvmeq->irqname, nvmeq);
+#endif
 }
 
 static void nvme_init_queue(struct nvme_queue *nvmeq, u16 qid)
@@ -1575,7 +1759,11 @@ static int nvme_create_queue(struct nvme
 	 * A queue's vector matches the queue identifier unless the controller
 	 * has only one vector available.
 	 */
+#if defined(HAVE_PCI_IRQ_API) && defined(HAVE_IRQ_CALC_AFFINITY_VECTORS_3_ARGS)
 	vector = dev->num_vecs == 1 ? 0 : qid;
+#else
+	vector = qid - 1;
+#endif
 	result = adapter_alloc_cq(dev, qid, nvmeq, vector);
 	if (result)
 		return result;
@@ -1610,23 +1798,47 @@ release_cq:
 	return result;
 }
 
+#ifdef HAVE_BLK_MQ_TAG_SET_HAS_CONST_POS
 static const struct blk_mq_ops nvme_mq_admin_ops = {
+#else
+static struct blk_mq_ops nvme_mq_admin_ops = {
+#endif
 	.queue_rq	= nvme_queue_rq,
 	.complete	= nvme_pci_complete_rq,
+#ifdef HAVE_BLK_MQ_OPS_MAP_QUEUE
+	.map_queue      = blk_mq_map_queue,
+#endif
 	.init_hctx	= nvme_admin_init_hctx,
 	.exit_hctx      = nvme_admin_exit_hctx,
+#ifdef HAVE_BLK_MQ_OPS_INIT_REQUEST_HAS_4_PARAMS
 	.init_request	= nvme_init_request,
+#else
+	.init_request	= nvme_admin_init_request,
+#endif
 	.timeout	= nvme_timeout,
 };
 
+#ifdef HAVE_BLK_MQ_TAG_SET_HAS_CONST_POS
 static const struct blk_mq_ops nvme_mq_ops = {
+#else
+static struct blk_mq_ops nvme_mq_ops = {
+#endif
 	.queue_rq	= nvme_queue_rq,
 	.complete	= nvme_pci_complete_rq,
+#ifdef HAVE_BLK_MQ_OPS_MAP_QUEUE
+	.map_queue      = blk_mq_map_queue,
+#endif
 	.init_hctx	= nvme_init_hctx,
 	.init_request	= nvme_init_request,
+#if defined(HAVE_BLK_MQ_OPS_MAP_QUEUES) && \
+	(defined(HAVE_PCI_IRQ_GET_AFFINITY) || \
+	defined(HAVE_BLK_MQ_PCI_MAP_QUEUES_3_ARGS))
 	.map_queues	= nvme_pci_map_queues,
+#endif
 	.timeout	= nvme_timeout,
+#ifdef HAVE_BLK_MQ_OPS_POLL
 	.poll		= nvme_poll,
+#endif
 };
 
 static void nvme_dev_remove_admin(struct nvme_dev *dev)
@@ -1637,7 +1849,11 @@ static void nvme_dev_remove_admin(struct
 		 * user requests may be waiting on a stopped queue. Start the
 		 * queue to flush these to completion.
 		 */
+#ifdef HAVE_BLK_MQ_UNQUIESCE_QUEUE
 		blk_mq_unquiesce_queue(dev->ctrl.admin_q);
+#else
+		blk_mq_start_stopped_hw_queues(dev->ctrl.admin_q, true);
+#endif
 		blk_cleanup_queue(dev->ctrl.admin_q);
 		blk_mq_free_tag_set(&dev->admin_tagset);
 	}
@@ -1653,7 +1869,9 @@ static int nvme_alloc_admin_tags(struct
 		dev->admin_tagset.timeout = ADMIN_TIMEOUT;
 		dev->admin_tagset.numa_node = dev_to_node(dev->dev);
 		dev->admin_tagset.cmd_size = nvme_pci_cmd_size(dev, false);
+#ifdef HAVE_BLK_MQ_F_NO_SCHED
 		dev->admin_tagset.flags = BLK_MQ_F_NO_SCHED;
+#endif
 		dev->admin_tagset.driver_data = dev;
 
 		if (blk_mq_alloc_tag_set(&dev->admin_tagset))
@@ -1671,7 +1889,11 @@ static int nvme_alloc_admin_tags(struct
 			return -ENODEV;
 		}
 	} else
+#ifdef HAVE_BLK_MQ_UNQUIESCE_QUEUE
 		blk_mq_unquiesce_queue(dev->ctrl.admin_q);
+#else
+		blk_mq_start_stopped_hw_queues(dev->ctrl.admin_q, true);
+#endif
 
 	return 0;
 }
@@ -1946,10 +2168,26 @@ static int __nvme_alloc_host_mem(struct
 
 	for (size = 0; size < preferred && i < max_entries; size += len) {
 		dma_addr_t dma_addr;
+#ifndef HAVE_DMA_SET_ATTR_TAKES_UNSIGNED_LONG_ATTRS
+		DEFINE_DMA_ATTRS(attrs);
+#ifdef HAVE_DMA_ATTR_NO_WARN
+		dma_set_attr(DMA_ATTR_NO_KERNEL_MAPPING | DMA_ATTR_NO_WARN, &attrs);
+#else
+		dma_set_attr(DMA_ATTR_NO_KERNEL_MAPPING, &attrs);
+#endif
+#endif
 
 		len = min_t(u64, chunk_size, preferred - size);
 		bufs[i] = dma_alloc_attrs(dev->dev, len, &dma_addr, GFP_KERNEL,
+#ifdef HAVE_DMA_SET_ATTR_TAKES_UNSIGNED_LONG_ATTRS
+#ifdef HAVE_DMA_ATTR_NO_WARN
 				DMA_ATTR_NO_KERNEL_MAPPING | DMA_ATTR_NO_WARN);
+#else
+				DMA_ATTR_NO_KERNEL_MAPPING);
+#endif
+#else
+				&attrs);
+#endif
 		if (!bufs[i])
 			break;
 
@@ -2052,12 +2290,18 @@ static int nvme_setup_io_queues(struct n
 {
 	struct nvme_queue *adminq = &dev->queues[0];
 	struct pci_dev *pdev = to_pci_dev(dev->dev);
+#ifdef HAVE_PCI_IRQ_API
 	int result, nr_io_queues;
+#else
+	int result, i, vecs, nr_io_queues;
+#endif
 	unsigned long size;
 
+#if defined(HAVE_PCI_IRQ_API) && defined(HAVE_IRQ_CALC_AFFINITY_VECTORS_3_ARGS)
 	struct irq_affinity affd = {
 		.pre_vectors = 1
 	};
+#endif
 
 	nr_io_queues = num_present_cpus() + dev->num_p2p_queues;
 	result = nvme_set_queue_count(&dev->ctrl, &nr_io_queues);
@@ -2098,20 +2342,55 @@ static int nvme_setup_io_queues(struct n
 	adminq->q_db = dev->dbs;
 
 	/* Deregister the admin queue's interrupt */
+#ifdef HAVE_PCI_FREE_IRQ
 	pci_free_irq(pdev, 0, adminq);
+#elif defined(HAVE_PCI_IRQ_API)
+	free_irq(pci_irq_vector(pdev, 0), adminq);
+#else
+	free_irq(dev->entry[0].vector, adminq);
+#endif
 
 	/*
 	 * If we enable msix early due to not intx, disable it again before
 	 * setting up the full range we need.
 	 */
+#ifdef HAVE_PCI_IRQ_API
 	pci_free_irq_vectors(pdev);
+#ifdef HAVE_IRQ_CALC_AFFINITY_VECTORS_3_ARGS
 	result = pci_alloc_irq_vectors_affinity(pdev, 1, nr_io_queues + 1 - dev->num_p2p_queues,
 			PCI_IRQ_ALL_TYPES | PCI_IRQ_AFFINITY, &affd);
 	if (result <= 0)
 		return -EIO;
 	dev->num_vecs = result;
 	dev->max_qid = max(result - 1 + dev->num_p2p_queues, 1u);
-
+#else
+	nr_io_queues = pci_alloc_irq_vectors(pdev, 1, nr_io_queues - dev->num_p2p_queues,
+		PCI_IRQ_ALL_TYPES | PCI_IRQ_AFFINITY);
+	if (nr_io_queues <= 0)
+		return -EIO;
+	dev->max_qid = nr_io_queues + dev->num_p2p_queues;
+#endif
+#else
+	if (pdev->msi_enabled)
+		pci_disable_msi(pdev);
+	else if (pdev->msix_enabled)
+		pci_disable_msix(pdev);
+
+	for (i = 0; i < nr_io_queues - dev->num_p2p_queues; i++)
+		dev->entry[i].entry = i;
+	vecs = pci_enable_msix_range(pdev, dev->entry, 1, nr_io_queues - dev->num_p2p_queues);
+	if (vecs < 0) {
+		vecs = pci_enable_msi_range(pdev, 1, min((nr_io_queues - dev->num_p2p_queues), 32u));
+		if (vecs < 0) {
+			vecs = 1;
+		} else {
+			for (i = 0; i < vecs; i++)
+				dev->entry[i].vector = i + pdev->irq;
+		}
+	}
+	nr_io_queues = vecs;
+	dev->max_qid = nr_io_queues + dev->num_p2p_queues;
+#endif
 
 	/*
 	 * Should investigate if there's a performance win from allocating
@@ -2164,7 +2443,11 @@ static int nvme_delete_queue(struct nvme
 	cmd.delete_queue.opcode = opcode;
 	cmd.delete_queue.qid = cpu_to_le16(nvmeq->qid);
 
+#ifdef HAVE_BLK_MQ_ALLOC_REQUEST_HAS_3_PARAMS
 	req = nvme_alloc_request(q, &cmd, BLK_MQ_REQ_NOWAIT, NVME_QID_ANY);
+#else
+	req = nvme_alloc_request(q, &cmd, GFP_KERNEL, false, NVME_QID_ANY);
+#endif
 	if (IS_ERR(req))
 		return PTR_ERR(req);
 
@@ -2238,7 +2521,9 @@ static int nvme_dev_add(struct nvme_dev
 
 		nvme_dbbuf_set(dev);
 	} else {
+#ifdef HAVE_BLK_MQ_UPDATE_NR_HW_QUEUES
 		blk_mq_update_nr_hw_queues(&dev->tagset, nr_hw_queues);
+#endif
 
 		/* Free previously allocated queues that are no longer usable */
 		nvme_free_queues(dev, dev->online_queues);
@@ -2271,9 +2556,21 @@ static int nvme_pci_enable(struct nvme_d
 	 * interrupts. Pre-enable a single MSIX or MSI vec for setup. We'll
 	 * adjust this later.
 	 */
+#ifdef HAVE_PCI_IRQ_API
 	result = pci_alloc_irq_vectors(pdev, 1, 1, PCI_IRQ_ALL_TYPES);
 	if (result < 0)
 		return result;
+#else
+	if (pci_enable_msix(pdev, dev->entry, 1)) {
+		pci_enable_msi(pdev);
+		dev->entry[0].vector = pdev->irq;
+	}
+
+	if (!dev->entry[0].vector) {
+		result = -ENODEV;
+		goto disable;
+	}
+#endif
 
 	dev->ctrl.cap = lo_hi_readq(dev->bar + NVME_REG_CAP);
 
@@ -2321,7 +2618,14 @@ static void nvme_pci_disable(struct nvme
 {
 	struct pci_dev *pdev = to_pci_dev(dev->dev);
 
+#ifdef HAVE_PCI_IRQ_API
 	pci_free_irq_vectors(pdev);
+#else
+	if (pdev->msi_enabled)
+		pci_disable_msi(pdev);
+	else if (pdev->msix_enabled)
+		pci_disable_msix(pdev);
+#endif
 
 	if (pci_is_enabled(pdev)) {
 		pci_disable_pcie_error_reporting(pdev);
@@ -2413,7 +2717,12 @@ static void nvme_pci_free_ctrl(struct nv
 	if (dev->ctrl.admin_q)
 		blk_put_queue(dev->ctrl.admin_q);
 	kfree(dev->queues);
+#ifdef HAVE_LINUX_SED_OPAL_H
 	free_opal_dev(dev->ctrl.opal_dev);
+#endif
+#ifndef HAVE_PCI_IRQ_API
+	kfree(dev->entry);
+#endif
 	mempool_destroy(dev->iod_mempool);
 	kfree(dev);
 }
@@ -2433,7 +2742,9 @@ static void nvme_reset_work(struct work_
 {
 	struct nvme_dev *dev =
 		container_of(work, struct nvme_dev, ctrl.reset_work);
+#ifdef HAVE_LINUX_SED_OPAL_H
 	bool was_suspend = !!(dev->ctrl.ctrl_config & NVME_CC_SHN_NORMAL);
+#endif
 	int result = -ENODEV;
 	enum nvme_ctrl_state new_state = NVME_CTRL_LIVE;
 
@@ -2480,6 +2791,7 @@ static void nvme_reset_work(struct work_
 	if (result)
 		goto out;
 
+#ifdef HAVE_LINUX_SED_OPAL_H
 	if (dev->ctrl.oacs & NVME_CTRL_OACS_SEC_SUPP) {
 		if (!dev->ctrl.opal_dev)
 			dev->ctrl.opal_dev =
@@ -2490,6 +2802,7 @@ static void nvme_reset_work(struct work_
 		free_opal_dev(dev->ctrl.opal_dev);
 		dev->ctrl.opal_dev = NULL;
 	}
+#endif
 
 	if (dev->ctrl.oacs & NVME_CTRL_OACS_DBBUF_SUPP) {
 		result = nvme_dbbuf_dma_alloc(dev);
@@ -2684,6 +2997,13 @@ static int nvme_probe(struct pci_dev *pd
 	if (!dev)
 		return -ENOMEM;
 
+#ifndef HAVE_PCI_IRQ_API
+	dev->entry = kzalloc_node(num_possible_cpus() * sizeof(*dev->entry),
+							GFP_KERNEL, node);
+	if (!dev->entry)
+		goto free;
+#endif
+
         dev->queues = kcalloc_node(num_possible_cpus() + 1 + num_p2p_queues,
 			sizeof(struct nvme_queue), GFP_KERNEL, node);
 
@@ -2759,10 +3079,24 @@ static int nvme_probe(struct pci_dev *pd
 	put_device(dev->dev);
  free:
 	kfree(dev->queues);
+#ifndef HAVE_PCI_IRQ_API
+	kfree(dev->entry);
+#endif
 	kfree(dev);
 	return result;
 }
 
+#ifdef HAVE_PCI_ERROR_HANDLERS_RESET_NOTIFY
+static void nvme_reset_notify(struct pci_dev *pdev, bool prepare)
+{
+	struct nvme_dev *dev = pci_get_drvdata(pdev);
+
+	if (prepare)
+		nvme_dev_disable(dev, false);
+	else
+		nvme_reset_ctrl(&dev->ctrl);
+}
+#elif defined(HAVE_PCI_ERROR_HANDLERS_RESET_PREPARE) && defined(HAVE_PCI_ERROR_HANDLERS_RESET_DONE)
 static void nvme_reset_prepare(struct pci_dev *pdev)
 {
 	struct nvme_dev *dev = pci_get_drvdata(pdev);
@@ -2774,6 +3108,7 @@ static void nvme_reset_done(struct pci_d
 	struct nvme_dev *dev = pci_get_drvdata(pdev);
 	nvme_reset_ctrl_sync(&dev->ctrl);
 }
+#endif
 
 static void nvme_shutdown(struct pci_dev *pdev)
 {
@@ -2882,11 +3217,20 @@ static const struct pci_error_handlers n
 	.error_detected	= nvme_error_detected,
 	.slot_reset	= nvme_slot_reset,
 	.resume		= nvme_error_resume,
-	.reset_prepare	= nvme_reset_prepare,
-	.reset_done	= nvme_reset_done,
+#ifdef HAVE_PCI_ERROR_HANDLERS_RESET_NOTIFY
+	.reset_notify   = nvme_reset_notify,
+#elif defined(HAVE_PCI_ERROR_HANDLERS_RESET_PREPARE) && defined(HAVE_PCI_ERROR_HANDLERS_RESET_DONE)
+	.reset_prepare  = nvme_reset_prepare,
+	.reset_done     = nvme_reset_done,
+#endif /* HAVE_PCI_ERROR_HANDLERS_RESET_NOTIFY */
 };
 
+#ifndef HAVE_PCI_CLASS_STORAGE_EXPRESS
+#define PCI_CLASS_STORAGE_EXPRESS      0x010802
+#endif
+
 static const struct pci_device_id nvme_id_table[] = {
+#ifdef HAVE_BLK_QUEUE_MAX_WRITE_ZEROES_SECTORS
 	{ PCI_VDEVICE(INTEL, 0x0953),
 		.driver_data = NVME_QUIRK_STRIPE_SIZE |
 				NVME_QUIRK_DEALLOCATE_ZEROES, },
@@ -2899,6 +3243,17 @@ static const struct pci_device_id nvme_i
 	{ PCI_VDEVICE(INTEL, 0x0a55),
 		.driver_data = NVME_QUIRK_STRIPE_SIZE |
 				NVME_QUIRK_DEALLOCATE_ZEROES, },
+#else
+	{ PCI_VDEVICE(INTEL, 0x0953),
+		.driver_data = NVME_QUIRK_STRIPE_SIZE |
+				NVME_QUIRK_DISCARD_ZEROES, },
+	{ PCI_VDEVICE(INTEL, 0x0a53),
+		.driver_data = NVME_QUIRK_STRIPE_SIZE |
+				NVME_QUIRK_DISCARD_ZEROES, },
+	{ PCI_VDEVICE(INTEL, 0x0a54),
+		.driver_data = NVME_QUIRK_STRIPE_SIZE |
+				NVME_QUIRK_DISCARD_ZEROES, },
+#endif
 	{ PCI_VDEVICE(INTEL, 0xf1a5),	/* Intel 600P/P3100 */
 		.driver_data = NVME_QUIRK_NO_DEEPEST_PS |
 				NVME_QUIRK_MEDIUM_PRIO_SQ },
@@ -2929,6 +3284,26 @@ static const struct pci_device_id nvme_i
 };
 MODULE_DEVICE_TABLE(pci, nvme_id_table);
 
+#ifndef PCI_SRIOV_CONFIGURE_SIMPLE
+static int nvme_pci_sriov_configure(struct pci_dev *pdev, int numvfs)
+{
+	int ret = 0;
+
+	if (numvfs == 0) {
+		if (pci_vfs_assigned(pdev)) {
+			dev_warn(&pdev->dev,
+				 "Cannot disable SR-IOV VFs while assigned\n");
+			return -EPERM;
+		}
+		pci_disable_sriov(pdev);
+		return 0;
+	}
+
+	ret = pci_enable_sriov(pdev, numvfs);
+	return ret ? ret : numvfs;
+}
+#endif
+
 static struct pci_driver nvme_driver = {
 	.name		= "nvme",
 	.id_table	= nvme_id_table,
@@ -2938,7 +3313,11 @@ static struct pci_driver nvme_driver = {
 	.driver		= {
 		.pm	= &nvme_dev_pm_ops,
 	},
+#ifdef PCI_SRIOV_CONFIGURE_SIMPLE
 	.sriov_configure = pci_sriov_configure_simple,
+#else
+	.sriov_configure = nvme_pci_sriov_configure,
+#endif
 	.err_handler	= &nvme_err_handler,
 };
 
